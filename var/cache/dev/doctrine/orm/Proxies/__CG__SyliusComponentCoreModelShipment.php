<?php

namespace Proxies\__CG__\Sylius\Component\Core\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Shipment extends \Sylius\Component\Core\Model\Shipment implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'order', 'id', 'state', 'method', 'units', 'tracking', 'createdAt', 'updatedAt'];
        }

        return ['__isInitialized__', 'order', 'id', 'state', 'method', 'units', 'tracking', 'createdAt', 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Shipment $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getOrder(): ?\Sylius\Component\Order\Model\OrderInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrder', []);

        return parent::getOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrder(?\Sylius\Component\Order\Model\OrderInterface $order): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrder', [$order]);

        parent::setOrder($order);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getState(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', []);

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setState(?string $state): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', [$state]);

        parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getMethod(): ?\Sylius\Component\Shipping\Model\ShippingMethodInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMethod', []);

        return parent::getMethod();
    }

    /**
     * {@inheritDoc}
     */
    public function setMethod(?\Sylius\Component\Shipping\Model\ShippingMethodInterface $method): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMethod', [$method]);

        parent::setMethod($method);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnits(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnits', []);

        return parent::getUnits();
    }

    /**
     * {@inheritDoc}
     */
    public function hasUnit(\Sylius\Component\Shipping\Model\ShipmentUnitInterface $unit): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasUnit', [$unit]);

        return parent::hasUnit($unit);
    }

    /**
     * {@inheritDoc}
     */
    public function addUnit(\Sylius\Component\Shipping\Model\ShipmentUnitInterface $unit): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUnit', [$unit]);

        parent::addUnit($unit);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUnit(\Sylius\Component\Shipping\Model\ShipmentUnitInterface $unit): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUnit', [$unit]);

        parent::removeUnit($unit);
    }

    /**
     * {@inheritDoc}
     */
    public function getTracking(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTracking', []);

        return parent::getTracking();
    }

    /**
     * {@inheritDoc}
     */
    public function setTracking(?string $tracking): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTracking', [$tracking]);

        parent::setTracking($tracking);
    }

    /**
     * {@inheritDoc}
     */
    public function isTracked(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isTracked', []);

        return parent::isTracked();
    }

    /**
     * {@inheritDoc}
     */
    public function getShippables(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShippables', []);

        return parent::getShippables();
    }

    /**
     * {@inheritDoc}
     */
    public function getShippingWeight(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShippingWeight', []);

        return parent::getShippingWeight();
    }

    /**
     * {@inheritDoc}
     */
    public function getShippingVolume(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShippingVolume', []);

        return parent::getShippingVolume();
    }

    /**
     * {@inheritDoc}
     */
    public function getShippingUnitCount(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShippingUnitCount', []);

        return parent::getShippingUnitCount();
    }

    /**
     * {@inheritDoc}
     */
    public function getShippingUnitTotal(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShippingUnitTotal', []);

        return parent::getShippingUnitTotal();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(?\DateTimeInterface $createdAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(?\DateTimeInterface $updatedAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        parent::setUpdatedAt($updatedAt);
    }

}
