<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'payum.builder' shared service.

include_once $this->targetDirs[3].'/vendor/payum/payum/src/Payum/Core/PayumBuilder.php';
include_once $this->targetDirs[3].'/vendor/payum/payum/src/Payum/Core/Bridge/Symfony/Builder/HttpRequestVerifierBuilder.php';
include_once $this->targetDirs[3].'/vendor/payum/payum/src/Payum/Core/Bridge/Symfony/Builder/TokenFactoryBuilder.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAwareInterface.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAwareTrait.php';
include_once $this->targetDirs[3].'/vendor/payum/payum/src/Payum/Core/Bridge/Symfony/Builder/CoreGatewayFactoryBuilder.php';

$this->services['payum.builder'] = $instance = new \Payum\Core\PayumBuilder();

$a = new \Payum\Core\Bridge\Symfony\Builder\CoreGatewayFactoryBuilder();
$a->setContainer($this);

$instance->setMainRegistry(($this->services['payum.static_registry'] ?? $this->load('getPayum_StaticRegistryService.php')));
$instance->setHttpRequestVerifier(new \Payum\Core\Bridge\Symfony\Builder\HttpRequestVerifierBuilder());
$instance->setTokenFactory(new \Payum\Core\Bridge\Symfony\Builder\TokenFactoryBuilder(($this->services['router'] ?? $this->getRouterService())));
$instance->setTokenStorage(($this->services['payum.security.token_storage'] ?? $this->load('getPayum_Security_TokenStorageService.php')));
$instance->setGenericTokenFactoryPaths(array('capture' => 'payum_capture_do', 'notify' => 'payum_notify_do', 'authorize' => 'payum_authorize_do', 'refund' => 'payum_refund_do', 'cancel' => 'payum_cancel_do', 'payout' => 'payum_payout_do'));
$instance->setCoreGatewayFactory($a);
$instance->addCoreGatewayFactoryConfig(array('payum.template.layout' => '@PayumCore\\layout.html.twig', 'payum.template.obtain_credit_card' => '@PayumSymfonyBridge\\obtainCreditCard.html.twig', 'payum.paths' => array('PayumSymfonyBridge' => ($this->targetDirs[3].'/vendor/payum/payum/src/Payum/Core/Bridge/Symfony/Resources/views')), 'payum.action.get_http_request' => ($this->services['payum.action.get_http_request'] ?? $this->load('getPayum_Action_GetHttpRequestService.php')), 'payum.action.obtain_credit_card' => ($this->services['payum.action.obtain_credit_card_builder'] ?? $this->load('getPayum_Action_ObtainCreditCardBuilderService.php'))));
$instance->addGateway('offline', array('factory' => 'offline'));
$instance->setGatewayConfigStorage(($this->services['payum.dynamic_gateways.config_storage'] ?? $this->load('getPayum_DynamicGateways_ConfigStorageService.php')));
$instance->addCoreGatewayFactoryConfig(array('twig.env' => '@twig'));
$instance->addCoreGatewayFactoryConfig(array('payum.action.sylius.capture_payment' => '@sylius.payum_action.capture_payment', 'payum.action.sylius.payum_action.execute_same_request_with_payment_details' => '@sylius.payum_action.execute_same_request_with_payment_details', 'payum.action.sylius.resolve_next_route' => '@sylius.payum_action.resolve_next_route', 'payum.extension.psr_logger' => '@payum.extension.logger', 'payum.extension.log_executed_actions' => '@payum.extension.log_executed_actions', 'payum.extension.profile_collector' => '@payum.profiler.payum_collector', 'payum.prepend_extensions' => array(0 => 'payum.extension.profile_collector', 1 => 'payum.extension.sylius.payum_extension.update_payment_state'), 'payum.extension.payum.extension.storage.sylius_component_core_model_order' => '@payum.extension.storage.sylius_component_core_model_order', 'payum.extension.payum.extension.storage.sylius_component_core_model_payment' => '@payum.extension.storage.sylius_component_core_model_payment', 'payum.extension.sylius.payum_extension.update_payment_state' => '@sylius.payum_extension.update_payment_state'));
$instance->addGatewayFactoryConfig('paypal_express_checkout', array('payum.action.sylius.paypal_express_checkout.convert_payment' => '@sylius.payum_action.paypal_express_checkout.convert_payment'));
$instance->addGatewayFactoryConfig('offline', array('payum.action.sylius.offline.convert_payment' => '@sylius.payum_action.offline.convert_payment', 'payum.action.sylius.offline.status' => '@sylus.payum_action.offline.status', 'payum.action.sylius.offline.resolve_next_route' => '@sylius.payum_action.offline.resolve_next_route'));

return $instance;
